// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { getClientRootComponent } from 'D:/code/ml/foolnet/website/node_modules/@umijs/renderer-react/dist/server.js';
import { getRoutes } from './core/route';
import { createHistory as createClientHistory } from './core/history';
import { getPlugins as getClientPlugins } from './core/plugin';
import { ServerInsertedHTMLContext } from './core/serverInsertedHTMLContext';
import { PluginManager } from 'D:/code/ml/foolnet/website/node_modules/umi/client/client/plugin.js';
import createRequestHandler, { createMarkupGenerator, createUmiHandler, createUmiServerLoader } from 'D:/code/ml/foolnet/website/node_modules/@umijs/server/dist/ssr.js';

let helmetContext;

try {
  helmetContext = require('./core/helmetContext').context;
} catch { /* means `helmet: false`, do noting */ }

const routesWithServerLoader = {
};

export function getPlugins() {
  return getClientPlugins();
}

export function getValidKeys() {
  return ['patchRoutes','patchClientRoutes','modifyContextOpts','modifyClientRenderOpts','rootContainer','innerProvider','i18nProvider','accessProvider','dataflowProvider','outerProvider','render','onRouteChange','modifyCodeSandboxData','modifyStackBlitzData','toSketchJSON',];
}

export function getManifest(sourceDir) {
  return JSON.parse(require('fs').readFileSync(
  sourceDir ? require('path').join(sourceDir,'build-manifest.json') : 'D:/code/ml/foolnet/dist/build-manifest.json', 'utf-8'));
}

export function createHistory(opts) {
  return createClientHistory(opts);
}

// TODO: remove global variable
global.g_getAssets = (fileName) => {
  let m = getManifest();
  return m.assets[fileName];
};
const createOpts = {
  routesWithServerLoader,
  PluginManager,
  getPlugins,
  getValidKeys,
  getRoutes,
  manifest: getManifest,
  getClientRootComponent,
  helmetContext,
  createHistory,
  ServerInsertedHTMLContext,
};
const requestHandler = createRequestHandler(createOpts);
export const renderRoot = createUmiHandler(createOpts);
export const serverLoader = createUmiServerLoader(createOpts);

export const _markupGenerator = createMarkupGenerator(createOpts);

export default requestHandler;
